#!/bin/bash

# TODO: Configurable locations...
realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

: ${MDE_PROGRAM:="$0"}
here=$(dirname $(realpath $MDE_PROGRAM))
this=$(basename $MDE_PROGRAM)

if [ -z "$WORKSPACE" ]; then
    WORKSPACE="$HOME/workspace"
fi
source_dir=$WORKSPACE/source
repos_dir=$WORKSPACE/repos
profiles_dir=$HOME/.config/biz.twitter.focus/profiles

if [ ! -d $profiles_dir ]; then
   profiles_dir="$here/profiles"
fi

echo "(Running as $this in $here with source in '$source_dir', repos in '$repos_dir', and profiles in '$profiles_dir')" > /dev/stderr

function die {
    echo "FATAL: $@" 2>&1 > /dev/stderr
    exit 1
}

function filter_dir_prefix {
    sed "s#$source_dir##g"
}

function filter_chain {
    filter_dir_prefix | \
        grep -v -e '^\s+$' | \
        grep -v 'com.apple.' | \
        grep -v 'pants_run_' | \
        grep -v '^\.git' | \
        grep -v '^\.pants\.d/' | \
        grep -v '^\.pids/' | \
        grep -v -e '^\s$' | \
        grep -v '^/$' | \
        grep -v '^\.$'
}

function unique_dirs {
    xargs -n1 dirname | \
        sort -s | \
        uniq
}

function list_profiles {
    ls -1 "$profiles_dir" | sed 's#\.sh##g'
}

function usage {
    exec 1>&2
    echo "Usage: focus-alpha <profile-name> <destination-repo-name>"
    echo
    echo "If your workspace is directory is not $HOME/workspace, you can specify an alternate location"
    echo "by setting the WORKSPACE environment variable."
    echo
    echo "N.B. The destination repo will be created in $repos_dir"
    echo -n "Profiles currently supported are: "
    list_profiles | tr '\n' ' '
    echo
}

work_dir=$(mktemp -d -t ${this}) || die "Creating a working directory failed"
remove_files() {
    rm -r "$work_dir"
}
trap remove_files EXIT

profile_name="$1"
dest_name="$2"
branch_name="$3"

if [ "$profile_name" == "update" ]; then
    git -C $here pull --ff-only origin focus/alpha || die "Updating failed"
    exit 0
fi
if [ "$profile_name" == "list" ]; then
    list_profiles
    exit 0
fi

if [ -z "$profile_name" ]; then
    usage
    exit 1
fi
if [ -z "$dest_name" ]; then
    usage
    exit 1
fi
if [ "$profile_name" == "help" ]; then
    usage
    exit 0
fi
if [ "$profile_name" == "--help" ]; then
    usage
    exit 0
fi
if [ -z "$branch_name" ]; then
    branch_name="master"
fi

set -o errexit

repo_dir="$repos_dir/$dest_name"
if [ -d "$repo_dir" ]; then
    die "$repo_dir already exists -- remove it to re-create and run again"
fi

## Create a tmp sparse specificiation for git-workspace.
sparse_file="$work_dir/sparse-checkout"

### Get a file list from the specified profiles
set -o errexit
set -o pipefail
touch $sparse_file.profiled
touch $sparse_file.heuristic
BASE_DEPS=$(cat $here/resources/base_deps.txt)

profiles="$profile_name"
pushd $source_dir
for profile in $profiles; do
    profile_script="$profiles_dir/$profile.sh"
    if [ ! -f $profile_script ]; then
        die "Profile $profile does not exist (tried '$profile_script')"
    fi
    echo "*** Determining relevant paths" > /dev/stderr
    (PANTS_CONCURRENT=True source "$profile_script" >> $sparse_file.profiled) || die "Profiled run failed"
done
popd
set +o errexit

echo "Writing to $sparse_file"
### Bring in well-known allowed paths that the targets aren't capturing
cp $here/resources/allowed_paths.txt $sparse_file.heuristic

#### Everything from the root
find $source_dir -type f -maxdepth 1 | filter_dir_prefix >> $sparse_file.heuristic
find $source_dir -type d -name 'pants*' -maxdepth 1 | filter_dir_prefix >> $sparse_file.heuristic
find $source_dir -type d -name 'bazel*' -maxdepth 1 | filter_dir_prefix >> $sparse_file.heuristic
(cat $sparse_file.profiled | filter_dir_prefix | unique_dirs >> $sparse_file.cooked) || die "Failed to concatenate files"
(cat $sparse_file.{cooked,heuristic} | grep -v '^/$' | grep -v '^\s+$' > $sparse_file) || die "Failed to create the sparse specification"

(python2 $here/git-workspace.py $source_dir $repo_dir --sparse $sparse_file) || die "Failed to run git-workspace"
(git -C $repo_dir status 2>&1 > /dev/null) || die "git status failed"

echo "*** Created a working set for the requested targets at $repo_dir." > /dev/stderr
