syntax = "proto3";

package storage;

message ContentDigest {
  enum Algorithm {
    SHA1 = 0;
    SHA256 = 1;
  }

  Algorithm algorithm = 1;
  bytes value = 2;
}

message Record {
  message Identifier {
    ContentDigest hash = 1;
  }

  Identifier identifier = 1;
  uint32 size = 2;
  bytes header = 3;
  bytes body = 4;
}

// Represents a location on disk.
message FileCoordinates {
  string path = 1;
  uint64 offset = 2;
  uint64 length = 3;
};

enum ErrorStatus {
  NO_ERROR = 0;
  NOT_FOUND = 1;
  IO_ERROR = 2;
  TEMP_ERROR = 3;
  FATAL_ERROR = 4;
}

message Error {
  ErrorStatus status = 1;
  string message = 2;
}


message WriteToFile {
  message Request {
    Record.Identifier content_identifier = 1;
    FileCoordinates header = 2;
    FileCoordinates body = 3;
  }

  message Response {
    bool stored = 1;
    bool extended = 2;
    Record.Identifier content_identifier = 3;
    FileCoordinates header = 4;
    FileCoordinates body = 5;
    Error error = 6;
  }
}

enum Wants {
  NONE = 0;
  HEADER = 1;
  BODY = 2;
  BOTH = 3;
}

message GetInline {
  message Request {
    Record.Identifier content_identifier = 1;
    Wants wants = 2;
  }

  message Response {
    bool found = 1;
    uint32 size = 2;
    bytes header = 3;
    bytes body = 4;
  }
}

message StoreContent {
  message Request {
    Record record = 1;
  }

  message Response {
    bool stored = 1;
    Error error = 2;
  }
}

service ContentStorage {
  rpc StoreContent (StoreContent.Request) returns (StoreContent.Response);
  rpc WriteToFile (WriteToFile.Request) returns (WriteToFile.Response);
  rpc GetInline (GetInline.Request) returns (GetInline.Response);
}



// object types that are written to rocksdb
message Persisted {
  enum ObjectType {
    // NONE is a placeholder because enums must start with 0
    NONE = 0;
    COMMIT = 1;
    TREE = 2;
    BLOB = 3;
    TAG = 4;
  }

  message Headers {
    // the type of object
    ObjectType obj_type = 1;
    // size of the object
    uint64 size = 2;
    int64 atime = 3;
    int64 mtime = 4;
  }
}
