* TODO [sparse-repos] Implement a workaround for fetching from Source

  The source repo doesn't allow fetching without journals. As a
  workaround for now, we can fetch in the dense repository, and in
  turn fetch from there. Not sure if implementing a Git remote helper
  to do this makes sense.

* DONE [sparse-repos] Write coordinates to a known location

* TODO [bazel] Bazel simultaneous startup bug
  Bazel fails to write a temp dir when it is started by multiple
  threads in quick succession. On macOS, this is relatively easy to
  reproduce. This probably has to do with Twitter's source wrapper
  script, which IIRC uses mktemp with directories -- dangerous!

  ```
  [2021-07-29T06:17:32Z INFO  focus_parachute::sparse_repos] --- Begin bazel stderr ---
  [2021-07-29T06:17:32Z INFO  focus_parachute::sparse_repos] INFO: Invocation ID: e86b73b7-e976-46f9-a296-62151d899df6
  [2021-07-29T06:17:32Z INFO  focus_parachute::sparse_repos] ERROR: /var/folders/3_/l3ytpvb16wl34_j53pyc3lm40000gr/T/tmp.X05HC0mV/event.bin
  [2021-07-29T06:17:32Z INFO  focus_parachute::sparse_repos] ERROR: Unable to write to '/var/folders/3_/l3ytpvb16wl34_j53pyc3lm40000gr/T/tmp.X05HC0mV/event.bin'. Omitting --build_event_binary_file. /var/folders/3_/l3ytpvb16wl34_j53pyc3lm40000gr/T/tmp.X05HC0mV/event.bin
  [2021-07-29T06:17:32Z INFO  focus_parachute::sparse_repos] --- End bazel stderr ---
  ```


* TODO [sparse-repos] Write out some metadata to be included in stats about the repository

* TODO [sparse-repos] Refactor the code for readability

* TODO [sparse-repos] Better job control
  If one thread dies, the program should just terminate quickly.

* TODO [git] Diagnose regular index loading slowness

* TODO [git] Diagnose sparse index loading slowness
  This option appears to have disappeared in some builds?

* TODO [git] Diagnose clone with `filter-sparse:blob=<sha>` slowness
  It's much quicker to just transfer more data because the counting
  objects phase takes forever.

* TODO [git] [sre] Explore profile guided optimization

* TODO [git] [sre] Explore link-time optimization



* TODO [sparse-repos] 

* Sparse indices vs regular indices (sparse repo); no watchman
** git version 2.32.0
*** Sparse (cone) index
    ```
    git status > /dev/null  1.98s user 1.07s system 126% cpu 2.407 total
    git status > /dev/null  2.00s user 1.05s system 127% cpu 2.399 total
    git status > /dev/null  1.98s user 1.06s system 128% cpu 2.358 total
    git status > /dev/null  1.92s user 0.99s system 125% cpu 2.322 total
    git status > /dev/null  1.95s user 1.02s system 128% cpu 2.319 total
    git status > /dev/null  1.89s user 0.95s system 123% cpu 2.291 total
    git status > /dev/null  1.89s user 1.01s system 125% cpu 2.313 total
    git status > /dev/null  1.91s user 1.01s system 128% cpu 2.279 total
    git status > /dev/null  1.97s user 1.03s system 127% cpu 2.348 total
    git status > /dev/null  1.95s user 1.04s system 128% cpu 2.337 total
    git status > /dev/null  1.96s user 1.04s system 126% cpu 2.368 total
    git status > /dev/null  2.00s user 1.04s system 127% cpu 2.383 total
    git status > /dev/null  1.92s user 1.03s system 128% cpu 2.296 total
    git status > /dev/null  1.93s user 1.02s system 127% cpu 2.316 total
    git status > /dev/null  2.00s user 1.03s system 127% cpu 2.384 total
    ```
*** Regular index
    ```
    git status > /dev/null  0.48s user 1.04s system 177% cpu 0.860 total
    git status > /dev/null  0.48s user 0.98s system 179% cpu 0.812 total
    git status > /dev/null  0.47s user 1.00s system 176% cpu 0.833 total
    git status > /dev/null  0.47s user 1.00s system 181% cpu 0.806 total
    git status > /dev/null  0.48s user 1.01s system 179% cpu 0.833 total
    git status > /dev/null  0.47s user 1.03s system 184% cpu 0.811 total
    git status > /dev/null  0.47s user 1.00s system 182% cpu 0.805 total
    git status > /dev/null  0.47s user 1.00s system 180% cpu 0.817 total
    git status > /dev/null  0.47s user 1.00s system 182% cpu 0.806 total
    git status > /dev/null  0.44s user 0.98s system 173% cpu 0.815 total
    git status > /dev/null  0.47s user 1.03s system 180% cpu 0.838 total
    git status > /dev/null  0.47s user 1.02s system 181% cpu 0.817 total
    git status > /dev/null  0.48s user 1.02s system 179% cpu 0.836 total
    git status > /dev/null  0.46s user 1.02s system 182% cpu 0.810 total
    git status > /dev/null  0.47s user 1.00s system 182% cpu 0.809 total
    ```

* Sparse indices vs regular indices (sparse repo); no watchman
*** Sparse (cone) index
    ```

    ```
*** Regular index
    ```
    git status > /dev/null  0.57s user 0.47s system 174% cpu 0.593 total                                                                                                                    
    git status > /dev/null  0.39s user 0.34s system 210% cpu 0.344 total                                                                                                                    
    git status > /dev/null  0.41s user 0.37s system 235% cpu 0.331 total                                                                                                                    
    git status > /dev/null  0.37s user 0.33s system 219% cpu 0.319 total                                                                                                                    
    git status > /dev/null  0.40s user 0.37s system 232% cpu 0.332 total
    git status > /dev/null  0.38s user 0.33s system 216% cpu 0.329 total
    git status > /dev/null  0.41s user 0.37s system 236% cpu 0.330 total
    git status > /dev/null  0.41s user 0.37s system 233% cpu 0.334 total
    git status > /dev/null  0.42s user 0.37s system 230% cpu 0.341 total
    git status > /dev/null  0.40s user 0.35s system 222% cpu 0.339 total
    git status > /dev/null  0.41s user 0.36s system 236% cpu 0.327 total
    git status > /dev/null  0.41s user 0.37s system 232% cpu 0.335 total
    git status > /dev/null  0.41s user 0.37s system 231% cpu 0.337 total
    git status > /dev/null  0.40s user 0.36s system 231% cpu 0.329 total
    git status > /dev/null  0.43s user 0.36s system 230% cpu 0.343 total
    ```

